name: 🚀 Build CV PDF

on:
  push:
    branches: [main, test]
    paths:
      - "src/**"
      - echo "🔍 Re-checking commands with updated PATH..."".github/workflows/**"
  pull_request:
    branches: [main]

jobs:
  build-cv:
    runs-on: ubuntu-latest

    permissions:
      contents: write # Permesso per commit e push
      actions: read # Permesso per leggere workflow

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🐳 Setup LaTeX Environment
        uses: xu-cheng/latex-action@v3
        with:
          root_file: cv.tex
          working_directory: src
          compiler: xelatex
          args: -interaction=nonstopmode -file-line-error
          extra_system_packages: |
            wget
            unzip
            fontconfig
            imagemagick
            ghostscript
            poppler-utils
          pre_compile: |
            echo "🔧 Fixing Lato font conflicts for XeLaTeX..."

            # Rimuovi font Lato Type1 problematici 
            rm -rf /opt/texlive/texdir/texmf-dist/fonts/type1/typoland/lato/ 2>/dev/null || true
            rm -rf /opt/texlive/texdir/texmf-dist/fonts/afm/typoland/lato/ 2>/dev/null || true

            # Download font Lato TrueType compatibili con XeLaTeX
            echo "📦 Downloading Lato TrueType fonts..."
            mkdir -p /usr/share/fonts/truetype/lato

            # Download diretto da Google Fonts repository
            wget -q "https://github.com/google/fonts/raw/main/ofl/lato/Lato-Regular.ttf" -O /usr/share/fonts/truetype/lato/Lato-Regular.ttf
            wget -q "https://github.com/google/fonts/raw/main/ofl/lato/Lato-Bold.ttf" -O /usr/share/fonts/truetype/lato/Lato-Bold.ttf  
            wget -q "https://github.com/google/fonts/raw/main/ofl/lato/Lato-Italic.ttf" -O /usr/share/fonts/truetype/lato/Lato-Italic.ttf
            wget -q "https://github.com/google/fonts/raw/main/ofl/lato/Lato-BoldItalic.ttf" -O /usr/share/fonts/truetype/lato/Lato-BoldItalic.ttf

            # Aggiorna cache dei font
            fc-cache -fv >/dev/null 2>&1

            echo "✅ Lato TrueType fonts installed"

      - name: 📋 Verify PDF Generation
        run: |
          echo "✅ Checking if CV PDF was generated..."
          ls -la src/
          if [ -f "src/cv.pdf" ]; then
            echo "✅ CV PDF successfully generated!"
            echo "📊 PDF Size: $(du -h src/cv.pdf | cut -f1)"
          else
            echo "❌ CV PDF generation failed!"
            exit 1
          fi

      - name: 🖼️ Generate PNG Preview
        run: |
          echo "🎨 Converting PDF to PNG for README preview..."
          cd src

          # Usa il tool integrato di TeX Live per conversione
          echo "🔍 Trying TeX Live built-in tools..."

          # Metodo 1: Usa dvisvgm se disponibile (TeX Live built-in)
          if command -v dvisvgm >/dev/null 2>&1; then
            echo "📦 Using TeX Live dvisvgm for conversion..."
            # Prima converti in SVG, poi in PNG se possibile
            dvisvgm --pdf cv.pdf --output=cv_preview.svg 2>/dev/null || echo "SVG conversion failed"
            if [ -f "cv_preview.svg" ]; then
              echo "✅ SVG generated, trying to convert to PNG..."
              # Se c'è convert, converte SVG → PNG
              if command -v convert >/dev/null 2>&1; then
                convert cv_preview.svg cv_preview.png
                rm cv_preview.svg
              else
                # Usa l'SVG direttamente (GitHub lo supporta)
                mv cv_preview.svg cv_preview.png
              fi
            fi
          fi

          # Metodo 2: Controlla se i tool installati sono disponibili ora
          if [ ! -f "cv_preview.png" ]; then
            # Aggiorna PATH per includere possibili directory di installazione
            export PATH="/usr/local/bin:/opt/texlive/bin:$PATH"
            
            echo "� Re-checking commands with updated PATH..."
            command -v pdftoppm && echo "✅ pdftoppm now available" || echo "❌ pdftoppm still not found"
            command -v convert && echo "✅ convert now available" || echo "❌ convert still not found"
            
            if command -v pdftoppm >/dev/null 2>&1; then
              echo "📦 Using pdftoppm..."
              pdftoppm -png -singlefile -r 300 cv.pdf cv_preview
            elif command -v convert >/dev/null 2>&1; then
              echo "📦 Using convert..."
              convert -density 300 cv.pdf[0] cv_preview.png
            fi
          fi

          # Metodo 3: Fallback estremo - copia il PDF come "preview"
          if [ ! -f "cv_preview.png" ]; then
            echo "⚠️ No conversion possible, using PDF as fallback..."
            cp cv.pdf cv_preview.png
            echo "📄 PDF copied as preview (will show download icon in GitHub)"
          fi

          # Verifica finale
          if [ -f "cv_preview.png" ]; then
            echo "✅ Preview file generated successfully!"
            echo "📊 File Size: $(du -h cv_preview.png | cut -f1)"
            file cv_preview.png 2>/dev/null || echo "File type check not available"
          else
            echo "❌ Preview generation completely failed!"
            exit 1
          fi

      - name: 🔄 Auto-commit PDF & PNG
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          # Add the generated PDF and PNG
          git add src/cv.pdf src/cv_preview.png

          # Check if there are changes to commit
          if git diff --staged --quiet; then
            echo "📄 No changes to CV files detected"
          else
            echo "📝 Committing updated CV PDF and PNG preview..."
            git commit -m "🤖 Auto-update CV PDF and PNG preview [skip ci]"
            git push
            echo "✅ CV files updated and pushed!"
          fi

      - name: 📤 Upload PDF Artifact
        uses: actions/upload-artifact@v4
        with:
          name: cv-pdf
          path: src/cv.pdf
          retention-days: 30

      - name: 🎉 Build Summary
        run: |
          echo "## 🎯 CV Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ✅ Success" >> $GITHUB_STEP_SUMMARY
          echo "- **PDF Location**: \`src/cv.pdf\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Compiler**: XeLaTeX" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
